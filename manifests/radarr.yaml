apiVersion: v1
kind: Secret
metadata:
  name: radarr-iscsi-chap
  namespace: default
type: "kubernetes.io/iscsi-chap"
data:
  node.session.auth.username: "cmFkYXJyCg=="
  node.session.auth.password: "bnk5S2RWVFJyNlRZYkFhTjRDNjMK"
---
#radarrs storage directory. iSCSI
apiVersion: v1
kind: PersistentVolume
metadata:
  name: radarr-config-pv
spec:
  capacity:
    storage: 1G
  accessModes:
    - ReadWriteMany
  iscsi:
    targetPortal: 192.168.2.2:3260
    iqn: 'iqn.2021-02.storage.thedutchmc.nl:radarr'
    lun: 1
    fsType: 'ext4'
    readOnly: false
    chapAuthDiscovery: true
    chapAuthSession: true
    secretRef:
      name: radarr-iscsi-chap
  persistentVolumeReclaimPolicy: Retain
---
#Transmissions download directory. NFS
apiVersion: v1
kind: PersistentVolume
metadata:
  name: transmission-radarr-storage-pv
spec:
  capacity:
    storage: 2000G
  accessModes:
    - ReadWriteMany
  nfs:
    path: /storage-pool/VM/100/transmission/completed
    server: 192.168.1.8
  persistentVolumeReclaimPolicy: Retain
---
#Export Directory for radarr. NFS
apiVersion: v1
kind: PersistentVolume
metadata:
  name: movie-radarr-storage-pv
spec:
  capacity:
    storage: 10000G
  accessModes:
    - ReadWriteMany
  nfs:
    path: /storage-pool/media/movies
    server: 192.168.1.8
  persistentVolumeReclaimPolicy: Retain
---
#radarrs config directory
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: radarr-config-pvc
spec:
  volumeName: radarr-config-pv
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1G
---
#Transmissions download directory
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: transmission-radarr-storage-pvc
spec:
  volumeName: transmission-radarr-storage-pv
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 2000G
---
#radarrs export directory for TV Shows
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: movie-radarr-storage-pvc
spec:
  volumeName: movie-radarr-storage-pv
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10000G
---
#Deployment. radarr container
apiVersion: apps/v1
kind: Deployment
metadata:
  name: radarr-deployment
  labels:
    app: radarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: radarr
  template:
    metadata:
      labels:
        app: radarr
    spec:
      containers:
      - name: radarr
        image: linuxserver/radarr
        ports:
        #Webinterface
        - containerPort: 7878
          name: webint
        volumeMounts:
        #radarrs config directory (iSCSI)
        - name: radarr-config
          mountPath: /config
        #Transmission download directory
        - name: transmission-storage
          mountPath: /data/completed/
        #Final resting place for the downloaded media
        - name: movie-storage
          mountPath: /movies
      volumes:
      - name: radarr-config
        persistentVolumeClaim:
          claimName: radarr-config-pvc
      - name: transmission-storage
        persistentVolumeClaim:
          claimName: transmission-radarr-storage-pvc
      - name: movie-storage
        persistentVolumeClaim: 
          claimName: movie-radarr-storage-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: radarr-service
spec:
  selector:
    app: radarr
  ports:
  #Webinterface
  - protocol: TCP
    name: webint
    port: 7878
    targetPort: 7878
---
#Ingress resource. Picked up by the NGINX ingress controller
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: radarr-ingress
  annotations:
    kubernets.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/whitelist-source-range: 85.144.63.138,192.168.1.0/24
    nginx.ingress.kubernetes.io/proxy-body-size: 150m

spec:
  tls:
  - hosts:
    - radarr.k8s.thedutchmc.nl
    secretName: thedutchmc-tls
  rules:
  - host: radarr.k8s.thedutchmc.nl
    http:
      paths:
      - backend:
          serviceName: radarr-service
          servicePort: 7878
