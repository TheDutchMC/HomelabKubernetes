apiVersion: v1
kind: Secret
metadata:
  name: bazarr-iscsi-chap
  namespace: default
type: "kubernetes.io/iscsi-chap"
data:
  node.session.auth.username: "YmF6YXJyCg=="
  node.session.auth.password: "N1RpQTlkcThvWVZpUW5KRVN2YnMK"
---
#bazarrs storage directory. iSCSI
apiVersion: v1
kind: PersistentVolume
metadata:
  name: bazarr-config-pv
spec:
  capacity:
    storage: 1G
  accessModes:
    - ReadWriteMany
  iscsi:
    targetPortal: 192.168.2.4:3260
    iqn: 'iqn.2021-02.storage.thedutchmc.nl:bazarr'
    lun: 1
    fsType: 'ext4'
    readOnly: false
    chapAuthDiscovery: true
    chapAuthSession: true
    secretRef:
      name: bazarr-iscsi-chap
  persistentVolumeReclaimPolicy: Retain
---
#Movie directory. NFS
apiVersion: v1
kind: PersistentVolume
metadata:
  name: movie-bazarr-storage-pv
spec:
  capacity:
    storage: 2000G
  accessModes:
    - ReadWriteMany
  nfs:
    path: /storage-pool/media/movies
    server: 192.168.2.3
  persistentVolumeReclaimPolicy: Retain
---
#TVShows directory, NFS
apiVersion: v1
kind: PersistentVolume
metadata:
  name: tvshow-bazarr-storage-pv
spec:
  capacity:
    storage: 10000G
  accessModes:
    - ReadWriteMany
  nfs:
    path: /storage-pool/media/tvshows
    server: 192.168.2.3
  persistentVolumeReclaimPolicy: Retain
---
#bazarrs config directory
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: bazarr-config-pvc
spec:
  volumeName: bazarr-config-pv
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1G
---
#Transmissions download directory
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: movie-bazarr-storage-pvc
spec:
  volumeName: movie-bazarr-storage-pv
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 2000G
---
#bazarrs export directory for TV Shows
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tvshow-bazarr-storage-pvc
spec:
  volumeName: tvshow-bazarr-storage-pv
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10000G
---
#Deployment. bazarr container
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bazarr-deployment
  labels:
    app: bazarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bazarr
  template:
    metadata:
      labels:
        app: bazarr
    spec:
      containers:
      - name: bazarr
        image: linuxserver/bazarr
        ports:
        #Webinterface
        - containerPort: 6767
          name: webint
        volumeMounts:
        #bazarrs config directory (iSCSI)
        - name: bazarr-config
          mountPath: /config
        #Movie directory
        - name: movie-storage
          mountPath: /movies
        #TVshow directory
        - name: tvshow-storage
          mountPath: /tv
      volumes:
      - name: bazarr-config
        persistentVolumeClaim:
          claimName: bazarr-config-pvc
      - name: movie-storage
        persistentVolumeClaim:
          claimName: movie-bazarr-storage-pvc
      - name: tvshow-storage
        persistentVolumeClaim: 
          claimName: tvshow-bazarr-storage-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: bazarr-service
spec:
  selector:
    app: bazarr
  ports:
  #Webinterface
  - protocol: TCP
    name: webint
    port: 6767
    targetPort: 6767
---
#Ingress resource. Picked up by the NGINX ingress controller
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bazarr-ingress
  annotations:
    kubernets.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/whitelist-source-range: 192.168.1.0/24
    nginx.ingress.kubernetes.io/proxy-body-size: 150m

spec:
  tls:
  - hosts:
    - bazarr.k8s.thedutchmc.nl
    secretName: thedutchmc-tls
  rules:
  - host: bazarr.k8s.thedutchmc.nl
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: bazarr-service
            port:
              number: 6767
